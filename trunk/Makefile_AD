##################################################################
#  ---------------------------------------------------
#  Makefile for experimental Eulerian setup
#  ---------------------------------------------------
#  $Rev: 360 $
#  $LastChangedDate: 2011-07-20 11:28:45 +0200 (Wed, 20 Jul 2011) $
#  $LastChangedBy: asch $ 
#
#  This initial Eulerian setup replaces the particle component do
#  that IBMlib can do offline Eulerian simulations. At a later stage we
#  may allow for hybrid Eulerian/Lagrangian dyunamics, but curretly 
#  PARTICLE_STATE module is replaced with with EULERIAN_DYNAMICS module.
#  Currently the link to OUTPUT module is not included, because OUTPUT modules
#  are currently oriented against particles
#  Remember to build by referencing the Eulerian dynamics makefile:
#   
#            make -f Makefile_AD
#  
#  to build the Eulerian setup defined in config.mk.
#  This makefile builds IBMlib core part and delegates out the building 
#  of modules PHYSICAL_FIELDS/EULERIAN_DYNAMICS/TASK to the designated directory
#  and finally links to all objects into the final executable EXECUTABLE.
#  Eulerian IBMLIB has four levels giving the appropriate build order (and allowed
#  directions of use association)
#
#   1) TASK     
#   2) EULERIAN_DYNAMICS   
#   3) PHYSICAL_FIELDS 
#   4) IBMLIB_BASE (incl external included tools)     
#
#  Each actual module PHYSICAL_FIELDS/EULERIAN_DYNAMICS/TASK must  be associated
#  with a separate directory containing one makefile providing the (minimal) targets
#  listed below.
#  One level is allowed to use associate to the same or a lower level
#  One level is not allowed to use associate to a higher level
#  One level is only allowed to build objects at its own level (distributed makefiles)
#  This means that .mod files from other levels should be considered external
#  like system installations. This means that makefile for PHYSICAL_FIELDS/EULERIAN_DYNAMICS/TASK
#  should suppress updates of external components and that root makefile
#  is responsible for overall build order 4->3->2->1 above. 
#  Each makefile of  may PHYSICAL_FIELDS/EULERIAN_DYNAMICS/TASK - or may not - include 
#  common_rules.mk/compiler_defaults.mk
#
#  Update responsibilities:
#  	$(IBMLIB_DIR)/Makefile:             IBMLIB_OBJS   EXECUTABLE 
#       $(PHYSICAL_FIELDS_DIR)/Makefile:    PHYSICAL_FIELDS
#       $(EULERIAN_DYNAMICS_DIR)/Makefile:  EULERIAN_DYNAMICS
#       $(TASK_DIR)/Makefile:               TASK
#  ---------------------------------------------------------------------------
#  module PHYSICAL_FIELDS
#     rooted in PHYSICAL_FIELDS_DIR. In this directory, there
#     should be a makefile updating the targets:
#        physical_fields.mod (F90 module interface, in directory PHYSICAL_FIELDS_DIR)
#        physical_fields.a   (all compiled objects of module, in directory PHYSICAL_FIELDS_DIR)
#        clean
#     An (optional) makefile link_opt.mk in PHYSICAL_FIELDS_DIR may define the following 
#     variables for link options to be used for the final stage linking:
#        LINKFLAGS_PHYSICAL
#        LINKLIBS_PHYSICAL 
#  ---------------------------------------------------------------------------   
#  module EULERIAN_DYNAMICS
#     rooted in EULERIAN_DYNAMICS_DIR. In this directory, there
#     should be a makefile updating the targets:
#        eulerian_dynamics.mod (F90 module interface, in directory EULERIAN_DYNAMICS_DIR)
#        eulerian_dynamics.a   (all compiled objects of module, in directory EULERIAN_DYNAMICS_DIR)
#        clean    
#     An (optional) makefile link_opt.mk in EULERIAN_DYNAMICS_DIR may define the following 
#     variables for link options to be used for the final stage linking:
#        LINKFLAGS_EULERIAN
#        LINKLIBS_EULERIAN      
#  ---------------------------------------------------------------------------   
#  module TASK. 
#     rooted in TASK_DIR  In this directory, there
#     should be a makefile updating the targets:
#        task.a (all compiled objects INCLUDING the main program, in directory EULERIAN_DYNAMICS_DIR)
#        clean
#     An (optional) makefile link_opt.mk in TASK_DIR may define the following 
#     variables for link options to be used for the final stage linking:
#        LINKFLAGS_TASK
#        LINKLIBS_TASK     
#  ---------------------------------------------------------------------------
#  Restrictions:
#     1) To have an intelligeble Makefile these rule apply for code organisation
#        so that a .mod.f rule can be applied for updating F90 modules:
# 
#        1a) one-module-one-file: only one module in each file
#        1b) head names of file and module match, i.e. yyy.f expresses module yyy
#        1c) a simple consistent case convention for module names 
#            (so module_dependence_scan.py can express dependency rules)
#        
#  TODO: enforce strict directions of use association
#        online/offline configuration of task
#
#  About order of objects at linking: "The traditional behavior of linkers is to search 
#  for external functions from left to right in the libraries specified on the command line. 
#  This means that a library containing the definition of a function should appear after any 
#  source files or object files which use it ...When several libraries are being used, 
#  the same convention should be followed for the libraries themselves."
#
#  ifort note: apparently this problem with ifort can just be handled
#  by duplicating link objects once ...
##################################################################

.PHONY: clean force remake variables 
	

# Set environment variables for build
export IBMLIB_DIR   = $(shell pwd)
export BUILD_TOOLS  = $(IBMLIB_DIR)/build_tools
export VPATH        = $(IBMLIB_DIR)  # make search path for src/obj    
export COMMON_RULES = $(IBMLIB_DIR)/common_rules.mk   #implicit rules shared between makefiles


# load build configuration 
include  compiler_defaults.mk                   # mandatory include 
include  config.mk                              # mandatory include
-include $(PHYSICAL_FIELDS_DIR)/link_opt.mk     # optional include 
-include $(EULERIAN_DYNAMICS_DIR)/link_opt.mk   # optional include 
-include $(TASK_DIR)/link_opt.mk                # optional include 

#Define Objects and their grouping
EXT_LIBS     = libtime/libtime77.a
BASELIBS     = grid_interpolations.o  runtime_tools.o  string_tools.o 
BASEMODS     = constants.mod  input_parser.mod  random_numbers.mod  time_tools.mod\
               run_context.mod  geometry.mod  array_tools.mod  spline.mod
BASEOBJS     = $(EXT_LIBS) $(BASELIBS) $(patsubst %.mod,%.o,$(BASEMODS))

IBMLIB_OBJS  = $(BASEOBJS)  physical_fields.a  advection_diffusion.a  task.a 

#Variables relating to the packaging
IBMLIB_SRCS    = $(shell svn list -R) #Srcs are anything in the repository (but the working copy there
IBMLIB_SRCS    += config.mk compiler_defaults.mk
IBMLIB_PACKAGE = IBMlib_srcs.tgz

#
#     Main task of this Makefile: EXECUTABLE - should be first target, to appear as default
#     currently TASK appears as task.a - at some point we may homogenize 
#     the setup. Dependencies order reflect strict build order of IBMlib
#
#     About order of objects at linking: the  linker  searches  and processes libraries and 
#     object files in the order they are specified, you should specify 
#     providing functions AFTER the last object file it applies. This is 
#     exactly opposite the make order. 
#     Therefore hack: dublicate IBMLIB_OBJS to ensure a provider is also after using function ...
#
$(EXECUTABLE): $(IBMLIB_OBJS)
	@echo ""
	$(FC)  $(IBMLIB_OBJS) $(IBMLIB_OBJS) $(LINKFLAGS) $(LINKLIBS) -o $(EXECUTABLE)


# 
#     Alternatively, cast the configuration defined in config.mk into an archive if
#     ARCHIVE is defined. If both EXECUTABLE and ARCHIVE is set and only "make" is 
#     typed on the prompt, EXECUTABLE takes precedence, because it is defined first 
#     in the Makefile
#
#
$(ARCHIVE): $(IBMLIB_OBJS)
	@echo ""
	$(BUILD_TOOLS)/arm.py $@ $(IBMLIB_OBJS)

# 
# --- collect additional optional linkflags / link options from PHYSICAL_FIELDS/EULERIAN_DYNAMICS/TASK 
#
LINKFLAGS += $(LINKFLAGS_PHYSICAL)  $(LINKFLAGS_EULERIAN)  $(LINKFLAGS_TASK) 
LINKLIBS  += $(LINKLIBS_PHYSICAL)   $(LINKLIBS_EULERIAN)   $(LINKLIBS_TASK) 

#
# --- and here below goes other targets of this makefile ---
#

physical_fields.a:     FORCE  $(BASEMODS) 
	@echo ""
	make -C $(PHYSICAL_FIELDS_DIR) physical_fields.mod physical_fields.a
	@ln -sf $(PHYSICAL_FIELDS_DIR)/physical_fields.a
	@ln -sf $(PHYSICAL_FIELDS_DIR)/physical_fields.mod

advection_diffusion.a: FORCE  $(BASEMODS)  physical_fields.a  
	@echo ""
	make -C $(EULERIAN_DYNAMICS_DIR) advection_diffusion.mod  advection_diffusion.a 
	@ln -sf $(EULERIAN_DYNAMICS_DIR)/advection_diffusion.a
	@ln -sf $(EULERIAN_DYNAMICS_DIR)/advection_diffusion.mod
	
task.a: FORCE $(BASEMODS) physical_fields.a  advection_diffusion.a
	@echo ""
	make -C $(TASK_DIR) task.a 
	ln -sf $(TASK_DIR)/task.a 

# take libtime/Makefile diagnostic on whether libtime77 has been untarred, hmm...


libtime/libtime77.a: FORCE  libtime/Makefile  
	@echo ""
	cd libtime;  make libtime77.a

libtime/Makefile:
	@echo ""
	cd libtime; tar xvfz libtime.tar.gz; rm -f Makefile; \
        ln -s Makefile_adapted_asc Makefile


clean: FORCE
	-/bin/rm -f *.o *.a *.mod $(IBMlib_package) dependences.mk $(EXECUTABLE)
	-make -C libtime cleanall
	-make -C $(PHYSICAL_FIELDS_DIR) clean
	-make -C $(EULERIAN_DYNAMICS_DIR) clean
	-make -C $(TASK_DIR) clean
	-make -C test_suite clean

remake:
	make clean; make
	
package:
	tar cvfzh $(IBMLIB_PACKAGE) $(IBMLIB_SRCS) --exclude=.* --ignore-failed-read 

test:
	make clean
	make -C test_suite fulltest

FORCE:

variables:
	clear
	@echo "############Compiler options###########"
	@echo "FC                   : " $(FC)
	@echo "FCFLAGS              : " $(FCFLAGS)
	@echo "FPPFLAGS             : " $(FPPFLAGS)
	@echo "############Linker options#############"
	@echo "LINKFLAGS_PHYSICAL   : " $(LINKFLAGS_PHYSICAL)
	@echo "LINKFLAGS_EULERIAN   : " $(LINKFLAGS_EULERIAN)
	@echo "LINKFLAGS_TASK       : " $(LINKFLAGS_TASK)
	@echo "LINKFLAGS            : " $(LINKFLAGS)
	@echo "LINKLIBS_PHYSICAL    : " $(LINKLIBS_PHYSICAL)
	@echo "LINKLIBS_EULERIAN    : " $(LINKLIBS_EULERIAN)
	@echo "LINKLIBS_TASK        : " $(LINKLIBS_TASK)
	@echo "LINKLIBS             : " $(LINKLIBS)
	@echo "############Config dirs################"
	@echo "PHYSICAL_FIELDS_DIR  : "  $(PHYSICAL_FIELDS_DIR)
	@echo "EULERIAN_DYNAMICS_DIR: "  $(EULERIAN_DYNAMICS_DIR)
	@echo "TASK_DIR             : "  $(TASK_DIR)
	@echo "IBMLIB_DIR           : "  $(IBMLIB_DIR)
	@echo "############Objects####################"
	@echo "IBMLIB_OBJS          : " $(IBMLIB_OBJS)
	@echo "EXECUTABLE           : " $(EXECUTABLE)

include $(COMMON_RULES)

